#include <iostream>
#include <algorithm> 
#include <iomanip>
#include <string.h> 
using namespace std;
struct process {
    int pid,AT,BT,ST,CT,TAT,WT,RT;
    };

int main() {

    int n;
    struct process p[100];
    float avg_TAT;
    float avg_WT;
    float avg_RT;
    int total_TAT = 0;
    int total_WT = 0;
    int total_RT = 0;
    int is_completed[100];
    memset(is_completed,0,sizeof(is_completed));

    cout << setprecision(2) << fixed;

    cout<<" Please Enter the number of processes: ";
    cin>>n;

    for(int i = 0; i < n; i++) {
        cout<<"Enter arrival time of process "<<i+1<<": ";
        cin>>p[i].AT;
        cout<<"Enter burst time of process "<<i+1<<": ";
        cin>>p[i].BT;
        p[i].pid = i+1;
        cout<<endl;
    }

    int current_time = 0;
    int completed = 0;
    int prev = 0;

    while(completed != n) {
        int idx = -1;
        int min = 10000000;
        for(int i = 0; i < n; i++) {
            if(p[i].AT <= current_time && is_completed[i] == 0) {
                if(p[i].BT < min) {
                    min = p[i].BT;
                    idx = i;
                }
                if(p[i].BT == min) {
                    if(p[i].AT < p[idx].AT) {
                        min = p[i].BT;
                        idx = i;
                    }
                }
            }
        }
        if(idx != -1) {
            p[idx].ST = current_time;
            p[idx].CT= p[idx].ST + p[idx].BT;
            p[idx].TAT = p[idx].CT - p[idx].AT;
            p[idx].WT = p[idx].TAT - p[idx].BT;
            p[idx].RT= p[idx].ST - p[idx].AT;
            
            total_TAT += p[idx].TAT;
            total_WT += p[idx].WT;
            total_RT += p[idx].RT;

            is_completed[idx] = 1;
            completed++;
            current_time = p[idx].CT;
            prev = current_time;
        }
        else {
            current_time++;
        }
        
    }

    int min_AT = 10000000;
    int max_CT = -1;
    for(int i = 0; i < n; i++) {
        min_AT = min(min_AT,p[i].AT);
        max_CT = max(max_CT,p[i].CT);
    }

    avg_TAT = (float) total_TAT / n;
    avg_WT = (float) total_WT / n;
    avg_RT = (float) total_RT / n;

    cout<<endl;
    cout<<"Pid\t"<<"AT\t"<<"BT\t"<<"ST\t"<<"CT\t"<<"TAT\t"<<"WT\t"<<"RT\t"<<"\n"<<endl;

    for(int i = 0; i < n; i++) {
        cout<<p[i].pid<<"\t"<<p[i].AT<<"\t"<<p[i].BT<<"\t"<<p[i].ST<<"\t"<<p[i].CT<<"\t"<<p[i].TAT<<"\t"<<p[i].WT<<"\t"<<p[i].RT<<"\t"<<"\n"<<endl;
    }
    cout<<"Average Turnaround Time = "<<avg_TAT<<endl;
    cout<<"Average Waiting Time = "<<avg_WT<<endl;
    cout<<"Average Response Time = "<<avg_RT<<endl;


}
